class Solution:
    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        MOD = 10**9 + 7
        
        # Step 1: Build the powers array
        powers = []
        bit = 1
        while n > 0:
            if n & 1:
                powers.append(bit)
            bit <<= 1
            n >>= 1
        
        # Step 2: Prefix product array
        prefix_prod = [0] * len(powers)
        prefix_prod[0] = powers[0] % MOD
        for i in range(1, len(powers)):
            prefix_prod[i] = (prefix_prod[i-1] * powers[i]) % MOD
        
        # Step 3: Answer queries
        result = []
        for l, r in queries:
            if l == 0:
                result.append(prefix_prod[r])
            else:
                inv = pow(prefix_prod[l-1], MOD-2, MOD)  # modular inverse
                result.append((prefix_prod[r] * inv) % MOD)
        
        return result
