class Solution:
    def findMaxFish(self, grid: List[List[int]]) -> int:
        if not grid or not grid[0]:
            return 0
        
        m, n = len(grid), len(grid[0])
        visited = [[False] * n for _ in range(m)]
        
        def dfs(r: int, c: int) -> int:
            if r < 0 or r >= m or c < 0 or c >= n or visited[r][c] or grid[r][c] == 0:
                return 0
            
            visited[r][c] = True
            fish_count = grid[r][c]
            
            # Explore adjacent cells
            fish_count += dfs(r + 1, c)  # down
            fish_count += dfs(r - 1, c)  # up
            fish_count += dfs(r, c + 1)  # right
            fish_count += dfs(r, c - 1)  # left
            
            return fish_count
        
        max_fish = 0
        
        for r in range(m):
            for c in range(n):
                if grid[r][c] > 0 and not visited[r][c]:
                    max_fish = max(max_fish, dfs(r, c))
        
        return max_fish
